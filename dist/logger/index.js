"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const winston = require("winston");
const SentryTransport = require("winston-raven-sentry");
const winston_elasticsearch_1 = require("winston-elasticsearch");
class SimpleLogger {
    /**
     * Simple logger constructor is deprecated, use SimpleLogger.initialize() instead.
     *
     * @deprecated
     */
    constructor() {
        throw new Error('Simple logger constructor is deprecated, use SimpleLogger.initialize() instead');
    }
    /**
     * Gets the singleton Logger instance, initializing it if needed.
     *
     * @param options The initialization options, for constructing if not available
     */
    static getInstance(options = {}) {
        if (!this.instance) {
            this.instance = this.initialize(options);
        }
        return this.instance;
    }
    /**
     * Initialize a new logger instance using Winston factory.
     *
     * @param options The logger initialization options
     */
    static initialize(options = {}) {
        // Prepare default console transport
        const opt = {
            transports: options.transports || SimpleLogger.DEFAULT_TRANSPORTS,
        };
        // Add sentry if available
        if (options.sentry) {
            opt.transports.push(new SentryTransport(options.sentry));
        }
        // Add elasticsearch if available
        if (options.elasticsearch) {
            opt.transports.push(new winston_elasticsearch_1.default(options.elasticsearch));
        }
        return winston.createLogger(opt);
    }
}
/**
 * The default transports thay will be enabled in the singleton.
 */
SimpleLogger.DEFAULT_TRANSPORTS = [
    new winston.transports.Console({
        level: process.env.LOG_LEVEL || 'silly',
        format: winston.format.colorize(),
    }),
];
exports.default = SimpleLogger;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvbG9nZ2VyL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsbUNBQW1DO0FBRW5DLHdEQUF3RDtBQUN4RCxpRUFBNEY7QUFtQjVGLE1BQXFCLFlBQVk7SUFhL0I7Ozs7T0FJRztJQUNIO1FBQ0UsTUFBTSxJQUFJLEtBQUssQ0FBQyxnRkFBZ0YsQ0FBQyxDQUFDO0lBQ3BHLENBQUM7SUFFRDs7OztPQUlHO0lBQ0ksTUFBTSxDQUFDLFdBQVcsQ0FBQyxVQUErQixFQUFFO1FBQ3pELElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2xCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUMxQztRQUNELE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN2QixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNJLE1BQU0sQ0FBQyxVQUFVLENBQUMsVUFBK0IsRUFBRTtRQUN4RCxvQ0FBb0M7UUFDcEMsTUFBTSxHQUFHLEdBQUc7WUFDVixVQUFVLEVBQUUsT0FBTyxDQUFDLFVBQVUsSUFBSSxZQUFZLENBQUMsa0JBQWtCO1NBQ2xFLENBQUM7UUFFRiwwQkFBMEI7UUFDMUIsSUFBSSxPQUFPLENBQUMsTUFBTSxFQUFFO1lBQ2xCLEdBQUcsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksZUFBZSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1NBQzFEO1FBRUQsaUNBQWlDO1FBQ2pDLElBQUksT0FBTyxDQUFDLGFBQWEsRUFBRTtZQUN6QixHQUFHLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLCtCQUFvQixDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO1NBQ3RFO1FBRUQsT0FBTyxPQUFPLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ25DLENBQUM7O0FBckREOztHQUVHO0FBQ0ksK0JBQWtCLEdBQWlDO0lBQ3hELElBQUksT0FBTyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUM7UUFDN0IsS0FBSyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxJQUFJLE9BQU87UUFDdkMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFO0tBQ2xDLENBQUM7Q0FDSCxDQUFDO0FBWEosK0JBeURDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmF2ZW4gZnJvbSAncmF2ZW4nO1xuaW1wb3J0ICogYXMgd2luc3RvbiBmcm9tICd3aW5zdG9uJztcbmltcG9ydCAqIGFzIFRyYW5zcG9ydCBmcm9tICd3aW5zdG9uLXRyYW5zcG9ydCc7XG5pbXBvcnQgKiBhcyBTZW50cnlUcmFuc3BvcnQgZnJvbSAnd2luc3Rvbi1yYXZlbi1zZW50cnknO1xuaW1wb3J0IFdpbnN0b25FbGFzdGljc2VhcmNoLCB7IEVsYXN0aWNzZWFyY2hUcmFuc3BvcnRPcHRpb25zIH0gZnJvbSAnd2luc3Rvbi1lbGFzdGljc2VhcmNoJztcblxuZXhwb3J0IGludGVyZmFjZSBTaW1wbGVMb2dnZXJPcHRpb25zIGV4dGVuZHMgd2luc3Rvbi5Mb2dnZXJPcHRpb25zIHtcbiAgc2VudHJ5PzogU2VudHJ5VHJhbnNwb3J0T3B0aW9ucztcbiAgZWxhc3RpY3NlYXJjaD86IEVsYXN0aWNzZWFyY2hUcmFuc3BvcnRPcHRpb25zO1xuICB0cmFuc3BvcnRzPzogVHJhbnNwb3J0W107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2VudHJ5VHJhbnNwb3J0T3B0aW9ucyBleHRlbmRzIFJhdmVuLkNvbnN0cnVjdG9yT3B0aW9ucyB7XG4gIGRzbjogc3RyaW5nO1xuICBsZXZlbD86IHN0cmluZztcbiAgbGV2ZWxzTWFwPzogYW55O1xuICBpbnN0YWxsPzogYm9vbGVhbjtcbiAgcmF2ZW4/OiBSYXZlbi5DbGllbnQ7XG59XG5cbi8vIEV4cG9ydCB0aGUgd2luc3Rvbi5Mb2dnZXIgdHlwZSBzbyB3ZSBkb24ndCBuZWVkIHRvIGluc3RhbGwgdGhlIHdpbnN0b24gdHlwZXMgb24gZGVwZW5kYW50c1xuZXhwb3J0IHR5cGUgTG9nZ2VySW5zdGFuY2UgPSB3aW5zdG9uLkxvZ2dlcjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2ltcGxlTG9nZ2VyIHtcbiAgcHJvdGVjdGVkIHN0YXRpYyBpbnN0YW5jZTogd2luc3Rvbi5Mb2dnZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IHRyYW5zcG9ydHMgdGhheSB3aWxsIGJlIGVuYWJsZWQgaW4gdGhlIHNpbmdsZXRvbi5cbiAgICovXG4gIHN0YXRpYyBERUZBVUxUX1RSQU5TUE9SVFM6IHdpbnN0b24uTG9nZ2VyWyd0cmFuc3BvcnRzJ10gPSBbXG4gICAgbmV3IHdpbnN0b24udHJhbnNwb3J0cy5Db25zb2xlKHtcbiAgICAgIGxldmVsOiBwcm9jZXNzLmVudi5MT0dfTEVWRUwgfHwgJ3NpbGx5JyxcbiAgICAgIGZvcm1hdDogd2luc3Rvbi5mb3JtYXQuY29sb3JpemUoKSxcbiAgICB9KSxcbiAgXTtcblxuICAvKipcbiAgICogU2ltcGxlIGxvZ2dlciBjb25zdHJ1Y3RvciBpcyBkZXByZWNhdGVkLCB1c2UgU2ltcGxlTG9nZ2VyLmluaXRpYWxpemUoKSBpbnN0ZWFkLlxuICAgKlxuICAgKiBAZGVwcmVjYXRlZFxuICAgKi9cbiAgcHJpdmF0ZSBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1NpbXBsZSBsb2dnZXIgY29uc3RydWN0b3IgaXMgZGVwcmVjYXRlZCwgdXNlIFNpbXBsZUxvZ2dlci5pbml0aWFsaXplKCkgaW5zdGVhZCcpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHNpbmdsZXRvbiBMb2dnZXIgaW5zdGFuY2UsIGluaXRpYWxpemluZyBpdCBpZiBuZWVkZWQuXG4gICAqXG4gICAqIEBwYXJhbSBvcHRpb25zIFRoZSBpbml0aWFsaXphdGlvbiBvcHRpb25zLCBmb3IgY29uc3RydWN0aW5nIGlmIG5vdCBhdmFpbGFibGVcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZ2V0SW5zdGFuY2Uob3B0aW9uczogU2ltcGxlTG9nZ2VyT3B0aW9ucyA9IHt9KTogd2luc3Rvbi5Mb2dnZXIge1xuICAgIGlmICghdGhpcy5pbnN0YW5jZSkge1xuICAgICAgdGhpcy5pbnN0YW5jZSA9IHRoaXMuaW5pdGlhbGl6ZShvcHRpb25zKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuaW5zdGFuY2U7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZSBhIG5ldyBsb2dnZXIgaW5zdGFuY2UgdXNpbmcgV2luc3RvbiBmYWN0b3J5LlxuICAgKlxuICAgKiBAcGFyYW0gb3B0aW9ucyBUaGUgbG9nZ2VyIGluaXRpYWxpemF0aW9uIG9wdGlvbnNcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgaW5pdGlhbGl6ZShvcHRpb25zOiBTaW1wbGVMb2dnZXJPcHRpb25zID0ge30pOiB3aW5zdG9uLkxvZ2dlciB7XG4gICAgLy8gUHJlcGFyZSBkZWZhdWx0IGNvbnNvbGUgdHJhbnNwb3J0XG4gICAgY29uc3Qgb3B0ID0ge1xuICAgICAgdHJhbnNwb3J0czogb3B0aW9ucy50cmFuc3BvcnRzIHx8IFNpbXBsZUxvZ2dlci5ERUZBVUxUX1RSQU5TUE9SVFMsXG4gICAgfTtcblxuICAgIC8vIEFkZCBzZW50cnkgaWYgYXZhaWxhYmxlXG4gICAgaWYgKG9wdGlvbnMuc2VudHJ5KSB7XG4gICAgICBvcHQudHJhbnNwb3J0cy5wdXNoKG5ldyBTZW50cnlUcmFuc3BvcnQob3B0aW9ucy5zZW50cnkpKTtcbiAgICB9XG5cbiAgICAvLyBBZGQgZWxhc3RpY3NlYXJjaCBpZiBhdmFpbGFibGVcbiAgICBpZiAob3B0aW9ucy5lbGFzdGljc2VhcmNoKSB7XG4gICAgICBvcHQudHJhbnNwb3J0cy5wdXNoKG5ldyBXaW5zdG9uRWxhc3RpY3NlYXJjaChvcHRpb25zLmVsYXN0aWNzZWFyY2gpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gd2luc3Rvbi5jcmVhdGVMb2dnZXIob3B0KTtcbiAgfVxufVxuIl19