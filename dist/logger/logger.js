"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const winston = require("winston");
const SentryTransport = require("winston-raven-sentry");
const ElasticsearchTransport = require("winston-elasticsearch");
class SimpleLogger extends winston.Logger {
    constructor(options = {}) {
        // Prepare default console transport
        const opt = {
            transports: options.transports || SimpleLogger.DEFAULT_TRANSPORTS,
        };
        // Add sentry if available
        if (options.sentry) {
            opt.transports.push(new SentryTransport(options.sentry));
        }
        if (options.elasticsearch) {
            opt.transports.push(new ElasticsearchTransport(Object.assign({}, options.elasticsearch)));
        }
        super(opt);
    }
    static getInstance(options) {
        if (!this.instance || options !== undefined) {
            const logger = new SimpleLogger(options);
            if (!this.instance) {
                this.instance = logger;
            }
            return logger;
        }
        return this.instance;
    }
}
SimpleLogger.DEFAULT_TRANSPORTS = [
    new (winston.transports.Console)({
        // TODO: Get from default configuration layer
        level: process.env.LOG_LEVEL || 'silly',
        colorize: true,
    }),
];
exports.default = SimpleLogger;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vbGliL2xvZ2dlci9sb2dnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxtQ0FBbUM7QUFHbkMsd0RBQXdEO0FBQ3hELGdFQUFnRTtBQXlCaEUsTUFBcUIsWUFBYSxTQUFRLE9BQU8sQ0FBQyxNQUFNO0lBV3RELFlBQW1CLFVBQStCLEVBQUU7UUFDbEQsb0NBQW9DO1FBQ3BDLE1BQU0sR0FBRyxHQUFHO1lBQ1YsVUFBVSxFQUFFLE9BQU8sQ0FBQyxVQUFVLElBQUksWUFBWSxDQUFDLGtCQUFrQjtTQUNsRSxDQUFDO1FBRUYsMEJBQTBCO1FBQzFCLElBQUksT0FBTyxDQUFDLE1BQU0sRUFBRTtZQUNsQixHQUFHLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLGVBQWUsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztTQUMxRDtRQUVELElBQUksT0FBTyxDQUFDLGFBQWEsRUFBRTtZQUN6QixHQUFHLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLHNCQUFzQixtQkFBTSxPQUFPLENBQUMsYUFBYSxFQUFHLENBQUMsQ0FBQztTQUMvRTtRQUVELEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNiLENBQUM7SUFFTSxNQUFNLENBQUMsV0FBVyxDQUFDLE9BQTZCO1FBQ3JELElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxJQUFJLE9BQU8sS0FBSyxTQUFTLEVBQUU7WUFDM0MsTUFBTSxNQUFNLEdBQUcsSUFBSSxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUM7WUFFekMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7Z0JBQ2xCLElBQUksQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDO2FBQ3hCO1lBQ0QsT0FBTyxNQUFNLENBQUM7U0FDZjtRQUNELE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN2QixDQUFDOztBQXBDTSwrQkFBa0IsR0FBZ0M7SUFDdkQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDL0IsNkNBQTZDO1FBQzdDLEtBQUssRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsSUFBSSxPQUFPO1FBQ3ZDLFFBQVEsRUFBRSxJQUFJO0tBQ2YsQ0FBQztDQUNILENBQUM7QUFUSiwrQkF3Q0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyB3aW5zdG9uIGZyb20gJ3dpbnN0b24nO1xuaW1wb3J0ICogYXMgUmF2ZW4gZnJvbSAncmF2ZW4nO1xuaW1wb3J0ICogYXMgZWxhc3RpY3NlYXJjaCBmcm9tICdlbGFzdGljc2VhcmNoJztcbmltcG9ydCAqIGFzIFNlbnRyeVRyYW5zcG9ydCBmcm9tICd3aW5zdG9uLXJhdmVuLXNlbnRyeSc7XG5pbXBvcnQgKiBhcyBFbGFzdGljc2VhcmNoVHJhbnNwb3J0IGZyb20gJ3dpbnN0b24tZWxhc3RpY3NlYXJjaCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2VudHJ5VHJhbnNwb3J0T3B0aW9ucyBleHRlbmRzIFJhdmVuLkNvbnN0cnVjdG9yT3B0aW9ucyB7XG4gIGRzbjogc3RyaW5nO1xuICBsZXZlbD86IHN0cmluZztcbiAgbGV2ZWxzTWFwPzogYW55O1xuICBpbnN0YWxsPzogYm9vbGVhbjtcbiAgcmF2ZW4/OiBSYXZlbi5DbGllbnQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2ltcGxlTG9nZ2VyT3B0aW9ucyBleHRlbmRzIHdpbnN0b24uTG9nZ2VyT3B0aW9ucyB7XG4gIHNlbnRyeT86IFNlbnRyeVRyYW5zcG9ydE9wdGlvbnM7XG4gIGVsYXN0aWNzZWFyY2g/OiB7XG4gICAgbGV2ZWw/OiBzdHJpbmc7XG4gICAgaW5kZXg/OiBzdHJpbmc7XG4gICAgaW5kZXhQcmVmaXg/OiBzdHJpbmc7XG4gICAgdHJhbnNmb3JtZXI/OiAoZGF0YTogYW55KSA9PiBhbnk7XG4gICAgY2xpZW50PzogZWxhc3RpY3NlYXJjaC5DbGllbnQ7XG4gICAgY2xpZW50T3B0cz86IGVsYXN0aWNzZWFyY2guQ29uZmlnT3B0aW9ucztcbiAgICAvLyBBY2NlcHQgb3RoZXIgb3B0c1xuICAgIFtrZXk6IHN0cmluZ106IGFueTtcbiAgfSxcbiAgdHJhbnNwb3J0cz86IHdpbnN0b24uVHJhbnNwb3J0SW5zdGFuY2VbXTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2ltcGxlTG9nZ2VyIGV4dGVuZHMgd2luc3Rvbi5Mb2dnZXIge1xuICBwcm90ZWN0ZWQgc3RhdGljIGluc3RhbmNlOiBTaW1wbGVMb2dnZXI7XG5cbiAgc3RhdGljIERFRkFVTFRfVFJBTlNQT1JUUzogd2luc3Rvbi5UcmFuc3BvcnRJbnN0YW5jZVtdID0gW1xuICAgIG5ldyAod2luc3Rvbi50cmFuc3BvcnRzLkNvbnNvbGUpKHtcbiAgICAgIC8vIFRPRE86IEdldCBmcm9tIGRlZmF1bHQgY29uZmlndXJhdGlvbiBsYXllclxuICAgICAgbGV2ZWw6IHByb2Nlc3MuZW52LkxPR19MRVZFTCB8fCAnc2lsbHknLFxuICAgICAgY29sb3JpemU6IHRydWUsXG4gICAgfSksXG4gIF07XG5cbiAgcHVibGljIGNvbnN0cnVjdG9yKG9wdGlvbnM6IFNpbXBsZUxvZ2dlck9wdGlvbnMgPSB7fSkge1xuICAgIC8vIFByZXBhcmUgZGVmYXVsdCBjb25zb2xlIHRyYW5zcG9ydFxuICAgIGNvbnN0IG9wdCA9IHtcbiAgICAgIHRyYW5zcG9ydHM6IG9wdGlvbnMudHJhbnNwb3J0cyB8fCBTaW1wbGVMb2dnZXIuREVGQVVMVF9UUkFOU1BPUlRTLFxuICAgIH07XG5cbiAgICAvLyBBZGQgc2VudHJ5IGlmIGF2YWlsYWJsZVxuICAgIGlmIChvcHRpb25zLnNlbnRyeSkge1xuICAgICAgb3B0LnRyYW5zcG9ydHMucHVzaChuZXcgU2VudHJ5VHJhbnNwb3J0KG9wdGlvbnMuc2VudHJ5KSk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuZWxhc3RpY3NlYXJjaCkge1xuICAgICAgb3B0LnRyYW5zcG9ydHMucHVzaChuZXcgRWxhc3RpY3NlYXJjaFRyYW5zcG9ydCh7IC4uLm9wdGlvbnMuZWxhc3RpY3NlYXJjaCB9KSk7XG4gICAgfVxuXG4gICAgc3VwZXIob3B0KTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgZ2V0SW5zdGFuY2Uob3B0aW9ucz86IFNpbXBsZUxvZ2dlck9wdGlvbnMpOiB3aW5zdG9uLkxvZ2dlckluc3RhbmNlIHtcbiAgICBpZiAoIXRoaXMuaW5zdGFuY2UgfHwgb3B0aW9ucyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBjb25zdCBsb2dnZXIgPSBuZXcgU2ltcGxlTG9nZ2VyKG9wdGlvbnMpO1xuXG4gICAgICBpZiAoIXRoaXMuaW5zdGFuY2UpIHtcbiAgICAgICAgdGhpcy5pbnN0YW5jZSA9IGxvZ2dlcjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBsb2dnZXI7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmluc3RhbmNlO1xuICB9XG59XG4iXX0=