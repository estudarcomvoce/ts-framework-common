"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const winston = require("winston");
const SentryTransport = require("winston-raven-sentry");
const ElasticsearchTransport = require("winston-elasticsearch");
class SimpleLogger extends winston.Logger {
    constructor(options = {}) {
        // Prepare default console transport
        const opt = {
            transports: options.transports || SimpleLogger.DEFAULT_TRANSPORTS,
        };
        // Add sentry if available
        if (options.sentry) {
            opt.transports.push(new SentryTransport(options.sentry));
        }
        if (options.elasticsearch) {
            opt.transports.push(new ElasticsearchTransport(options.elasticsearch));
        }
        super(opt);
    }
    static getInstance(options) {
        if (!this.instance || options !== undefined) {
            const logger = new SimpleLogger(options);
            if (!this.instance) {
                this.instance = logger;
            }
            return logger;
        }
        return this.instance;
    }
}
SimpleLogger.DEFAULT_TRANSPORTS = [
    new (winston.transports.Console)({
        // TODO: Get from default configuration layer
        level: process.env.LOG_LEVEL || 'silly',
        colorize: true,
    }),
];
exports.default = SimpleLogger;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vbGliL2xvZ2dlci9sb2dnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxtQ0FBbUM7QUFHbkMsd0RBQXdEO0FBQ3hELGdFQUFnRTtBQWdCaEUsTUFBcUIsWUFBYSxTQUFRLE9BQU8sQ0FBQyxNQUFNO0lBV3RELFlBQW1CLFVBQStCLEVBQUU7UUFDbEQsb0NBQW9DO1FBQ3BDLE1BQU0sR0FBRyxHQUFHO1lBQ1YsVUFBVSxFQUFFLE9BQU8sQ0FBQyxVQUFVLElBQUksWUFBWSxDQUFDLGtCQUFrQjtTQUNsRSxDQUFDO1FBRUYsMEJBQTBCO1FBQzFCLElBQUksT0FBTyxDQUFDLE1BQU0sRUFBRTtZQUNsQixHQUFHLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLGVBQWUsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztTQUMxRDtRQUVELElBQUksT0FBTyxDQUFDLGFBQWEsRUFBRTtZQUN6QixHQUFHLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLHNCQUFzQixDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO1NBQ3hFO1FBRUQsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2IsQ0FBQztJQUVNLE1BQU0sQ0FBQyxXQUFXLENBQUMsT0FBNkI7UUFDckQsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLElBQUksT0FBTyxLQUFLLFNBQVMsRUFBRTtZQUMzQyxNQUFNLE1BQU0sR0FBRyxJQUFJLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUV6QyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtnQkFDbEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUM7YUFDeEI7WUFDRCxPQUFPLE1BQU0sQ0FBQztTQUNmO1FBQ0QsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3ZCLENBQUM7O0FBcENNLCtCQUFrQixHQUFnQztJQUN2RCxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMvQiw2Q0FBNkM7UUFDN0MsS0FBSyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxJQUFJLE9BQU87UUFDdkMsUUFBUSxFQUFFLElBQUk7S0FDZixDQUFDO0NBQ0gsQ0FBQztBQVRKLCtCQXdDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHdpbnN0b24gZnJvbSAnd2luc3Rvbic7XG5pbXBvcnQgKiBhcyBSYXZlbiBmcm9tICdyYXZlbic7XG5pbXBvcnQgKiBhcyBlbGFzdGljc2VhcmNoIGZyb20gJ2VsYXN0aWNzZWFyY2gnO1xuaW1wb3J0ICogYXMgU2VudHJ5VHJhbnNwb3J0IGZyb20gJ3dpbnN0b24tcmF2ZW4tc2VudHJ5JztcbmltcG9ydCAqIGFzIEVsYXN0aWNzZWFyY2hUcmFuc3BvcnQgZnJvbSAnd2luc3Rvbi1lbGFzdGljc2VhcmNoJztcblxuZXhwb3J0IGludGVyZmFjZSBTZW50cnlUcmFuc3BvcnRPcHRpb25zIGV4dGVuZHMgUmF2ZW4uQ29uc3RydWN0b3JPcHRpb25zIHtcbiAgZHNuOiBzdHJpbmc7XG4gIGxldmVsPzogc3RyaW5nO1xuICBsZXZlbHNNYXA/OiBhbnk7XG4gIGluc3RhbGw/OiBib29sZWFuO1xuICByYXZlbj86IFJhdmVuLkNsaWVudDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTaW1wbGVMb2dnZXJPcHRpb25zIGV4dGVuZHMgd2luc3Rvbi5Mb2dnZXJPcHRpb25zIHtcbiAgc2VudHJ5PzogU2VudHJ5VHJhbnNwb3J0T3B0aW9ucztcbiAgZWxhc3RpY3NlYXJjaD86IGVsYXN0aWNzZWFyY2guQ29uZmlnT3B0aW9ucztcbiAgdHJhbnNwb3J0cz86IHdpbnN0b24uVHJhbnNwb3J0SW5zdGFuY2VbXTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2ltcGxlTG9nZ2VyIGV4dGVuZHMgd2luc3Rvbi5Mb2dnZXIge1xuICBwcm90ZWN0ZWQgc3RhdGljIGluc3RhbmNlOiBTaW1wbGVMb2dnZXI7XG5cbiAgc3RhdGljIERFRkFVTFRfVFJBTlNQT1JUUzogd2luc3Rvbi5UcmFuc3BvcnRJbnN0YW5jZVtdID0gW1xuICAgIG5ldyAod2luc3Rvbi50cmFuc3BvcnRzLkNvbnNvbGUpKHtcbiAgICAgIC8vIFRPRE86IEdldCBmcm9tIGRlZmF1bHQgY29uZmlndXJhdGlvbiBsYXllclxuICAgICAgbGV2ZWw6IHByb2Nlc3MuZW52LkxPR19MRVZFTCB8fCAnc2lsbHknLFxuICAgICAgY29sb3JpemU6IHRydWUsXG4gICAgfSksXG4gIF07XG5cbiAgcHVibGljIGNvbnN0cnVjdG9yKG9wdGlvbnM6IFNpbXBsZUxvZ2dlck9wdGlvbnMgPSB7fSkge1xuICAgIC8vIFByZXBhcmUgZGVmYXVsdCBjb25zb2xlIHRyYW5zcG9ydFxuICAgIGNvbnN0IG9wdCA9IHtcbiAgICAgIHRyYW5zcG9ydHM6IG9wdGlvbnMudHJhbnNwb3J0cyB8fCBTaW1wbGVMb2dnZXIuREVGQVVMVF9UUkFOU1BPUlRTLFxuICAgIH07XG5cbiAgICAvLyBBZGQgc2VudHJ5IGlmIGF2YWlsYWJsZVxuICAgIGlmIChvcHRpb25zLnNlbnRyeSkge1xuICAgICAgb3B0LnRyYW5zcG9ydHMucHVzaChuZXcgU2VudHJ5VHJhbnNwb3J0KG9wdGlvbnMuc2VudHJ5KSk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuZWxhc3RpY3NlYXJjaCkge1xuICAgICAgb3B0LnRyYW5zcG9ydHMucHVzaChuZXcgRWxhc3RpY3NlYXJjaFRyYW5zcG9ydChvcHRpb25zLmVsYXN0aWNzZWFyY2gpKTtcbiAgICB9XG5cbiAgICBzdXBlcihvcHQpO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBnZXRJbnN0YW5jZShvcHRpb25zPzogU2ltcGxlTG9nZ2VyT3B0aW9ucyk6IHdpbnN0b24uTG9nZ2VySW5zdGFuY2Uge1xuICAgIGlmICghdGhpcy5pbnN0YW5jZSB8fCBvcHRpb25zICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGNvbnN0IGxvZ2dlciA9IG5ldyBTaW1wbGVMb2dnZXIob3B0aW9ucyk7XG5cbiAgICAgIGlmICghdGhpcy5pbnN0YW5jZSkge1xuICAgICAgICB0aGlzLmluc3RhbmNlID0gbG9nZ2VyO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGxvZ2dlcjtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuaW5zdGFuY2U7XG4gIH1cbn1cbiJdfQ==